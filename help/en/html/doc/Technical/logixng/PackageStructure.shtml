<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: LogixNG Documentation</title>
  <meta name="author" content="Daniel Bergqvist">
  <meta name="keywords" content=
  "logixng model railroad JMRI LogixNG PanelPro"><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <div id="container">
    <!--#include virtual="/Header" -->

    <div id="mBody">
      <!--#include virtual="Sidebar.shtml" -->

      <div id="mainContent">
        <!-- Page Body -->

        <h1>LogixNG - Package structure</h1>

		<h2>The package structure of LogixNG</h2>

		<p>A major design principle for LogixNG is modularity. In order to
		achieve that, LogixNG has the following structure.</p>

		<h3>jmri.jmrit.logixng</h3>

		<p>The package jmri.jmrit.logixng is the public interface of LogixNG.
		Every part of JMRI may use everything in this package.</p>

		<h3>jmri.jmrit.logixng.actions</h3>

		<p>The package jmri.jmrit.logixng.actions has the actions that are
		shipped with JMRI. These are registered by a factory class and should
		not be accessed directly. Each action is to be considered as its own
		'package' and an action should not use another action directly.</p>
		
		<p>There should not be any assumptions on which actions are included
		in JMRI. The list of action classes is supplied by the ActionManager.
		This ensures that action classes can be added later, either to the JMRI
		source code or at runtime as plugins.</p>

		<h3>jmri.jmrit.logixng.actions.swing</h3>

		<p>The package jmri.jmrit.logixng.actions.swing has the action
		configuration classes that uses Swing.</p>

		<h3>jmri.jmrit.logixng.expressions</h3>

		<p>The package jmri.jmrit.logixng.expressions has the expressions that
		are shipped with JMRI. These are registered by a factory class and should
		not be accessed directly. Each expression is to be considered as its own
		'package' and an expression should not use another expression directly.</p>
		
		<p>There should not be any assumptions on which expressions are included
		in JMRI. The list of expression classes is supplied by the ExpressionManager.
		This ensures that expression classes can be added later, either to the JMRI
		source code or at runtime as plugins.</p>

		<h3>jmri.jmrit.logixng.expressions.swing</h3>

		<p>The package jmri.jmrit.logixng.expressions.swing has the expression
		configuration classes that uses Swing.</p>

		<h3>jmri.jmrit.logixng.engine</h3>

		<p>The package jmri.jmrit.logixng.engine is the brain which makes LogixNG
		to run. It handles all the internal stuff. No other parts of JMRI nor LogixNG
		should access this package directly.</p>

		<h3>jmri.jmrit.tools.swing</h3>

		<p>The package jmri.jmrit.logixng.tools.swing has the editor, debugger and
		time diagram of LogixNG.</p>

		<h3>Exceptions to the above rules</h3>

		<p>The ImportLogix tool uses many expressions in the jmri.jmrit.logixng.expressions
		package and many actions in the jmri.jmrit.logixng.actions package.</p>

		<p>jmri.managers.DefaultInstanceInitializer uses the default managers in the
		jmri.jmrit.logixng.engine package.</p>
		
		<p>The XML schema xml/schema/types/logixng-4.13.4.xsd uses the default managers
		in the jmri.jmrit.logixng.engine package.</p>

        <!--#include virtual="/Footer" -->
      </div><!-- closes #mainContent-->
    </div><!-- closes #mBody-->
  </div><!-- closes #container -->
</body>
</html>
