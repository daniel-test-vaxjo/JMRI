<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
  <meta name="generator" content=
  "HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.17), see www.w3.org">

  <title>JMRI: New Logix Documentation</title>
  <meta name="author" content="Daniel Bergqvist">
  <meta name="keywords" content=
  "newlogix model railroad JMRI NewLogix PanelPro"><!-- Style -->
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii">
  <link rel="stylesheet" type="text/css" href="/css/default.css"
  media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css"
  media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/"><!-- /Style -->
</head>

<body>
  <div id="container">
    <!--#include virtual="/Header" -->

    <div id="mBody">
      <!--#include virtual="Sidebar" -->

      <div id="mainContent">
        <!-- Page Body -->

        <h1>JMRI Code: NewLogix</h1>

        <p>This page describes the technical aspects of NewLogix and
		how to add new features to NewLogix. It's recommended to read
		the <a href="../../tools/NewLogix.shtml">User manual</a>
		first which describes the concept of NewLogix.</p>



		<h2>The enum Categories</h2>

		<p>Every type of expression and action has a predefined category to
		which this expression or action belongs to. The main use of
		category is to sort expressions by category when the user adds a new
		expression and therefore selects the type of expression to add.</p>

		<ul>
		<li><strong>ITEM</strong><br>A item on the layout, for example turnout,
		sensor and signal mast</li>
		<li><strong>COMMON</strong><br>Commonly used items. Common expressions
		are for example ExpressionAnd, ExpressionOr and ExpressionTimer.<br>
		Common actions are for example ActionMany and ActionDoIf.</li>
		<li><strong>OTHER</strong><br>All other expressions and actions which
		don't fit in the above categories.</li>
		</ul>



		<h2>Creating an Expression</h2>

		<p>An expression must implement the <strong>NewLogixExpression</strong>
		interface, that in turn inherits the <strong>NamedBean</strong> interface.
		It's recommended that expression classes extends the
		<strong>AbstractExpression</strong> class which has a default implementation
		of the NamedBean interface.</p>

		<h3>Methods</h3>

		<h4>getCategory</h4>

		<p>Returns which category this expression belongs to.</p>

		<h4>isExternal</h4>

		<p>Returns <strong>true</strong> if the expression is dependent on an external
		condition, for example the state of a turnout. An expression is considered
		internal if it only depends on other expressions or is static. Examples of
		external expressions are ExpressionTurnout and ExpressionSignalHead.
		Examples of internal expressions are ExpressionAnd, ExpressionOr and
		ExpressionTrue.</p>

		<h4>evaluate</h4>

		<p>Evaluates the expression and returns the result of the expression.</p>

		<h4>reset</h4>

		<p>Resets the evaluation. The method <strong>reset()</strong> is called then when
		the closest ancestor Action is activated. An example is a timer who is used to
		delay the execution of an action's child action.</p>
		<p>A parent expression must to call <strong>reset()</strong> on its child when the
		method <strong>reset()</strong> is called on the parent.</p>



		<h2>Creating an Action</h2>

        <h2>Plugins for NewLogix</h2>

		<p>NewLogix supports expression and action plugins.</p>

		<p><a href="https://github.com/danielb987/JMRI_NewLogixPlugins">JMRI_NewLogixPlugins</a>
		is an example project with some expression plugins and action plugins.
		The project has <a href="https://danielb987.github.io/JMRI_NewLogixPlugins.Documentation/javadoc/">Javadoc</a>.
		The file
		<a href="https://github.com/danielb987/JMRI_NewLogixPlugins.Documentation/raw/master/docs/distribution/JMRI_NewLogixPlugins.jar">JMRI_NewLogixPlugins.jar</a>
		is the current version of the plugin. The classes in JMRI_NewLogixPlugins
		are not considered useful but intended to demonstrate the possibilities
		with NewLogix. For example, ExpressionBlink and ActionHideAndShowPanel
		can be used to repeatedly hide and show a selected panel. It has no
		prototypical usage but can be used to play a joke with a fellow model
		railroader...

        <h2></h2>
        <h2></h2>
        <h2></h2>
        <h2></h2>

		<p>The main building blocks in NewLogix is Expressions and
		Actions. Expressions ask a question while Actions do somethings.
		It can be described as:</p>

        <div style="margin-left: 2em;">
		<p><code>if (expression) then (action).
        </code></p></div>

		<p>An expression ask a question which can be true or False.
		"Is turnout LT20 thrown?" If it is, the answer is True,
		else it's False. Some expressions depends on other expressions.
		Like the "And" expression, which is True if all of its expressions
		are True. There is a timer expression which becomes true when
		a certain time has passed.</p>

		<p>Actions do something. It can set a turnout or a signal. Some
		actions activates other actions, which in turn do something.</p>

		<h3>Expressions</h3>

		<p><strong>And</strong> - True if all of its expressions
		are true.</p>

		<p><strong>Hold</strong> - This expression has expressions,
		the hold expression and the trigger expression. The expression.
		becomes true when both the hold and the trigger expression
		is true and it then stays true as long as the hold expression
		remains true. This expression can be used then a condition is
		true under a short period of time, for example a button that
		the user presses, and there the expression needs to stay true.</p>

		<p><strong>Reset On True</strong> - This Expression has two
		expressions, the primary expression and the secondary
		expression. When the primary expression becomes True after
		have been False, the secondary expression is reset.<br>
		The result of the evaluation of this expression is True if
		both the expressions evaluates to True.<br>
		This expression is used for example if one expression should
		trigger a timer. If the primary expression is a sensor having a
		certain state and the secondary expression is a timer, this
		expression will evaluate to True if the sensor has had that
		state during the specified time.</p>

		<p><strong>Timer</strong> - This expression has a timer. The
		expression is true if the time has passed.</p>

		<p><strong>Trigger Once</strong> - An expression that has
		another expression. It is true the first time the child
		expression is true and then becomes false. It stays false
		until the child expression becomes false and then true again.</p>

		<p><strong>Turnout</strong> - True if a turnout has a certain
		state.</p>

		<h3>Actions</h3>

		<p><strong>Do If</strong> - This action ask an expression if its
		condition is true. If it is, it activates an other action.</p>

		<p><strong>Many</strong> - This action activates many other actions.</p>

		<p><strong>Turnout</strong> - Set the state of a turnout.</p>

        <h2>How to setup NewLogixs</h2>

        <h2>Time Diagram</h2>

        <!--#include virtual="/Footer" -->
      </div><!-- closes #mainContent-->
    </div><!-- closes #mBody-->
  </div><!-- closes #container -->
</body>
</html>
